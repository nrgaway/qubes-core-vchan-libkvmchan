diff --git a/libkvmchan/Makefile b/libkvmchan/Makefile
index eec5ab9..3a02ef6 100644
--- a/libkvmchan/Makefile
+++ b/libkvmchan/Makefile
@@ -4,12 +4,18 @@ BIN:=libkvmchan.so
 LIBS=-lrt -pthread
 DEBUG:=true
 
+SYSTEMD ?= 1
+
 DAEMON_SRCS:=daemon/daemon.c daemon/libvirt.c daemon/util.c daemon/ivshmem.c daemon/vfio.c \
 	daemon/ipc.c daemon/connections.c daemon/localhandler.c
 DAEMON_DEPS:=$(DAEMON_SRCS:.c=.daemon.o)
 DAEMON_BIN:=kvmchand
 DAEMON_LIBS:=-lrt -pthread $(shell pkg-config --libs libvirt libvirt-qemu libxml-2.0)
 DAEMON_CFLAGS:=$(shell pkg-config --cflags libxml-2.0)
+ifeq ($(SYSTEMD),1)
+DAEMON_CFLAGS += -DHAVE_SYSTEMD
+DAEMON_LIBS += `pkg-config --libs libsystemd || pkg-config --libs libsystemd-daemon`
+endif
 
 TEST_SRCS:=test.c
 TEST_DEPS:=$(TEST_SRCS:.c=.o)
diff --git a/libkvmchan/daemon/localhandler.c b/libkvmchan/daemon/localhandler.c
index 46d6df2..beb4a16 100644
--- a/libkvmchan/daemon/localhandler.c
+++ b/libkvmchan/daemon/localhandler.c
@@ -40,6 +40,10 @@
 #include "config.h"
 #include "libkvmchan-priv.h"
 
+#ifdef HAVE_SYSTEMD
+#include <systemd/sd-daemon.h>
+#endif
+
 // Whenever one of our clients creates a vchan in server mode,
 // we need to record it so that we can clean it up when the client
 // disconnects.
@@ -572,6 +576,22 @@ void run_localhandler_loop(int mainsoc, bool is_dom0) {
     if (!vec_voidp_init(&data.clients, 10, client_destructor))
         goto error;
 
+#ifdef HAVE_SYSTEMD
+    log(LOGL_INFO, "guest_main: sd_notify");
+    /**
+     * sd_notify(int unset_environment, const char *state);
+     *
+     * If the unset_environment parameter is non-zero, sd_notify() will unset
+     * the $NOTIFY_SOCKET environment variable before returning (regardless of
+     * whether the function call itself succeeded or not). Further calls to
+     * sd_notify() will then fail, but the variable is no longer inherited by
+     * child processes.
+     */
+    if (getenv("NOTIFY_SOCKET")) {
+        sd_notify(1, "READY=1");
+    }
+#endif /* HAVE_SYSTEMD */
+
     // Poll for events
     struct epoll_event events[5];
     int event_count;
