diff --git a/libkvmchan/Makefile b/libkvmchan/Makefile
index 4656602..dace4bc 100644
--- a/libkvmchan/Makefile
+++ b/libkvmchan/Makefile
@@ -1,4 +1,4 @@
-SRCS:=library.c ringbuf.c
+SRCS:=library.c ringbuf.c util.c
 DEPS:=$(SRCS:.c=.o)
 BIN:=libkvmchan.so
 LIBS=-lrt -pthread
diff --git a/libkvmchan/library.c b/libkvmchan/library.c
index 35be46b..bd1a23f 100644
--- a/libkvmchan/library.c
+++ b/libkvmchan/library.c
@@ -39,6 +39,7 @@
 #include "libkvmchan.h"
 #include "libkvmchan-priv.h"
 #include "ringbuf.h"
+#include "util.h"
 
 // Represents global library state.
 struct libkvmchan_state {
@@ -264,7 +265,9 @@ static bool get_conn_fds_deferred(uint32_t ivposition, int fds_out[KVMCHAND_FD_M
     //
     // For now, my workaround is to simply sleep and try to obtain the
     // fds afterwards. This is gross and stupid but it works for now.
+    debug(LOGL_INFO, "get_conn_fds_deferred: usleep...");
     usleep(4 * 1000 * 1000);
+    debug(LOGL_INFO, "get_conn_fds_deferred: wakeup...");
 
     struct kvmchand_ret ret;
     struct kvmchand_message msg = {
@@ -273,15 +276,26 @@ static bool get_conn_fds_deferred(uint32_t ivposition, int fds_out[KVMCHAND_FD_M
             ivposition
         }
     };
-    if (localmsg_send(g_state.socfd, &msg, sizeof(msg), NULL, 0) < 0)
+    debug(LOGL_INFO, "get_conn_fds_deferred: localmsg_send...");
+    if (localmsg_send(g_state.socfd, &msg, sizeof(msg), NULL, 0) < 0) {
+        debug(LOGL_INFO, "get_conn_fds_deferred: localmsg_send is < 0");
         return false;
-    if (localmsg_recv(g_state.socfd, &ret, sizeof(ret), fds_out) < 0)
+    }
+
+    debug(LOGL_INFO, "get_conn_fds_deferred: localmsg_recv...");
+    if (localmsg_recv(g_state.socfd, &ret, sizeof(ret), fds_out) < 0) {
+        debug(LOGL_INFO, "get_conn_fds_deferred: localmsg_recv is < 0");
         return false;
+    }
+
+    debug(LOGL_INFO, "get_conn_fds_deferred: ret.error2...");
     if (ret.error) {
+        debug(LOGL_INFO, "get_conn_fds_deferred: ret.error2");
         errno = ENOENT;
         return false;
     }
 
+    debug(LOGL_INFO, "get_conn_fds_deferred: return TRUE");
     return true;
 }
 
@@ -297,6 +311,7 @@ static bool get_conn_fds_deferred(uint32_t ivposition, int fds_out[KVMCHAND_FD_M
  * @param write_min minimum size of write ringbuf
  */
 struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t read_min, size_t write_min) {
+    debug(LOGL_INFO, "libkvmchan_server_init: Entered function [300]");
     struct libkvmchan *ret = NULL;
     if ((errno = pthread_mutex_lock(&g_state.mutex)))
         return NULL;
@@ -306,6 +321,7 @@ struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t
     }
 
     // Initialize libkvmchan struct
+    debug(LOGL_INFO, "libkvmchan_server_init: Initialize libkvmchan struct...");
     ret = malloc(sizeof(struct libkvmchan));
     if (!ret)
         goto out;
@@ -314,6 +330,7 @@ struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t
     ret->port = port;
 
     // Send request to kvmchand
+    debug(LOGL_INFO, "libkvmchan_server_init: Send request to kvmchand...");
     int fds[KVMCHAND_FD_MAX];
     for (size_t i=0; i<KVMCHAND_FD_MAX; i++)
         fds[i] = -1;
@@ -327,18 +344,26 @@ struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t
             write_min
         }
     };
+
+    // Sending message will create new PCI device in separate IOMMU group
+    debug(LOGL_INFO, "libkvmchan_server_init: Message send...");
     if (localmsg_send(g_state.socfd, &dmsg, sizeof(dmsg), NULL, 0) < 0)
         goto out_fail_malloc_ret;
+
+    debug(LOGL_INFO, "libkvmchan_server_init: Message receive...");
     if (localmsg_recv(g_state.socfd, &dret, sizeof(dret), fds) < 0)
         goto out_fail_malloc_ret;
     if (dret.error) {
+        debug(LOGL_ERROR, "libkvmchan_server_init: Message error");
         errno = EINVAL;
         goto out_fail_malloc_ret;
     }
 
+    debug(LOGL_INFO, "libkvmchan_server_init: Dom0 check...");
     bool is_dom0 = true;
     uint32_t ivposition = dret.ret;
     if (dret.fd_count == 0) {
+        debug(LOGL_INFO, "libkvmchan_server_init: Dom0 is False");
         // If we're not on dom0, we need to manually request the fds for this connection
         // static bool get_conn_fds_deferred(uint32_t ivposition, int fds_out[KVMCHAND_FD_MAX]) {
         is_dom0 = false;
@@ -347,15 +372,18 @@ struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t
         }
     }
 
+    debug(LOGL_INFO, "libkvmchan_server_init: !do_shm_map...");
     if (!do_shm_map(ret, is_dom0, fds[0]))
         goto out_fail_fds;
 
     // Calculate size of ring buffers
+    debug(LOGL_INFO, "libkvmchan_server_init: Calculate size of ring buffers...");
     size_t rb_size = (ret->shm_size - sizeof(shmem_hdr_t)) / 2;
     size_t h2c_rb_start = sizeof(shmem_hdr_t);
     size_t c2h_rb_start = h2c_rb_start + h2c_rb_start;
 
     // Initialize ringbufs
+    debug(LOGL_INFO, "libkvmchan_server_init: Initialize ringbufs...");
     int incoming_eventfds[2] = { fds[1], fds[2] };
     int outgoing_eventfds[2] = { fds[3], fds[4] };
     shmem_hdr_t *shm_hdr = ret->shm;
@@ -365,6 +393,7 @@ struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t
                         (uint8_t *)shm_hdr + h2c_rb_start, rb_size, RINGBUF_FLAG_BLOCKING,
                         RINGBUF_DIRECTION_WRITE, incoming_eventfds[0], outgoing_eventfds[0])) {
         errno = EIO;
+        debug(LOGL_ERROR, "libkvmchan_server_init: out_fail_fds-1");
         goto out_fail_fds;
     }
 
@@ -373,20 +402,25 @@ struct libkvmchan *libkvmchan_server_init(uint32_t domain, uint32_t port, size_t
                         (uint8_t *)shm_hdr + c2h_rb_start, rb_size, RINGBUF_FLAG_BLOCKING,
                         RINGBUF_DIRECTION_READ, incoming_eventfds[1], outgoing_eventfds[1])) {
         errno = EIO;
+        debug(LOGL_ERROR, "libkvmchan_server_init: out_fail_fds-2");
         goto out_fail_fds;
     }
 
     // Success
+    debug(LOGL_INFO, "libkvmchan_server_init: Success");
     goto out;
 
 out_fail_fds:
+    debug(LOGL_ERROR, "libkvmchan_server_init: FAILS_FDS");
     for (size_t i=0; i<KVMCHAND_FD_MAX; i++)
         if (fds[i] > 0)
             close(fds[i]);
 out_fail_malloc_ret:
+    debug(LOGL_ERROR, "libkvmchan_server_init: FAIL_MALLOC_RET");
     free(ret);
     ret = NULL;
 out:
+    debug(LOGL_INFO, "libkvmchan_server_init: OUT");
     pthread_mutex_unlock(&g_state.mutex);
     return ret;
 }
